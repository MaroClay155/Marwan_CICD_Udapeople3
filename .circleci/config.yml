version: 2.1
orbs:
  slack: circleci/slack@4.9.3
  
commands:
  install_awscli:
    description: Install awscli
    steps:
      - run:
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            
  install_nodejs:
    description: Install node.js 13
    steps:
      - run:
          command: |
            curl -fsSl https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
            
  install_ansible:
    description: Install ansible
    steps:
      - run:
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
            
  notify_on_failure:
    description: notify_on_failure
    steps:
      - slack/notify:
          event: fail
          channel: no-thing-just-a-test
          template: basic_fail_1
          
  notify_on_success:
    description: notify_on_success
    steps:
      - slack/notify:
          event: pass
          channel: no-thing-just-a-test
          template: basic_pass_1
          
  destroy_environment:
    description: Destroy environment
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
          #aws cloudformation delete-stack --stack-name prometheus-${CIRCLE_WORKFLOW_ID:0:7}
            
  revert_migrations:  #????????????????????????????????????????????????????????????????????????????????????????????????????????????????
    description: Revert the last migration if successfully run in the current workflow.  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (( $SUCCESS == 1 )); 
            then
               cd ~/project/backend
               npm install
               npm run migration:revert
            fi
            
jobs:

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
      
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: test back-end
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
          
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical 
      #     npm audit --audit-level=critical   
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: scan Back-end 
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
      #      npm audit --audit-level=critical   
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan        
          
  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          no_output_timeout: 30m
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          no_output_timeout: 30m
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          when: on_fail
          command: |
            aws cloudformation describe-stack-events --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      #- run:
      #    name: Install tar utility
      #    command: |
      #      yum install -y tar gzip
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            echo "Contents  of the main-inventory file is -------"
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend" --output text >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment 
      - notify_on_failure
      - notify_on_success
      
  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - add_ssh_keys:
            fingerprints: ["87:c2:d0:af:d5:78:91:13:33:07:72:95:a4:9f:e1:89"] 
      - attach_workspace:
          at: ~/
      #- run:
      #    name: Install Ansible & Dependensies
      #    command: |
      #      pip3 install awscli
      #      apk add --update ansible
      #      apk add curl
      - run:
          name: Run Playbook and Configure server #aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend" --output text >> inventory.txt
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt main.yml
      - destroy_environment 
      - notify_on_failure
        
  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy_environment 
      - revert_migrations  
      - notify_on_failure
            
  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend" --output text)
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects #tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment 
      - revert_migrations  
      - notify_on_failure
      
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
            fingerprints: ["87:c2:d0:af:d5:78:91:13:33:07:72:95:a4:9f:e1:89"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies 
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cp ./artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: deply backend
          command: |
            export  TYPEORM_MIGRATIONS_DIR=./migrations
            export  TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export  TYPEORM_MIGRATIONS=./migrations/*.ts
            
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy_environment 
      - revert_migrations
      - notify_on_failure

  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Frontend smoke test.
          command: |
            Frontend_Website_URL=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/         
            echo ${Frontend_Website_URL} 
            if curl -s ${Frontend_Website_URL} | grep "Welcome"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - destroy_environment 
      - revert_migrations
      - notify_on_failure

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: save old workflow id to kvdb.io #curl https://kvdb.io/${KVDB_BUCKET}/OldWorkflowID  -d '1' ${Old_Workflow_ID}  
          command: |
            export Old_Workflow_ID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo "Old_Workflow_ID: $Old_Workflow_ID"  
            curl https://kvdb.io/${KVDB_BUCKET}/OldWorkflowID -d "${Old_Workflow_ID}"
      - run:
          name: update cloudfront distribution
          command: |
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" --stack-name InitialStack
      - destroy_environment 
      - revert_migrations
      - notify_on_failure
      
  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo "stack names: ${STACKS[@]}"
            
            export oldworkflowid=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/OldWorkflowID)
            echo "old workflow ID: $oldworkflowid"
            if [[ "${STACKS[@]}" != "${oldworkflowid}" ]];
            then 
              aws s3 rm s3://udapeople-${oldworkflowid} --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-${oldworkflowid}
              aws cloudformation delete-stack --stack-name udapeople-backend-${oldworkflowid}
            fi
      - destroy_environment  #aws s3 rm s3://udapeople-${oldworkflowid} --recursive
      - revert_migrations  
      - notify_on_failure
      - notify_on_success
  

      
      
  
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]
    
     
